package controller;import db.DataBase;import entity.Customer;import entity.Item;import entity.ItemDetail;import entity.Order;import javafx.animation.Animation;import javafx.animation.KeyFrame;import javafx.animation.Timeline;import javafx.collections.FXCollections;import javafx.collections.ObservableList;import javafx.event.ActionEvent;import javafx.event.EventHandler;import javafx.fxml.FXMLLoader;import javafx.scene.Scene;import javafx.scene.control.*;import javafx.scene.control.cell.PropertyValueFactory;import javafx.scene.layout.AnchorPane;import javafx.stage.Stage;import javafx.stage.Window;import javafx.util.Duration;import tm.CartTM;import javax.xml.crypto.Data;import java.io.IOException;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.time.LocalTime;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;public class PlaceOrderFormController {    public AnchorPane root;    public Label lblOrderId;    public Label lblTime;    public Label lblDate;    public TextField txtAddress;    public TextField txtSalary;    public ComboBox<String> cmbItemCOde;    public TextField txtDescription;    public TextField txtQtyOnHand;    public TextField txtUnitPrice;    public TextField txtQTY;    public TableView tblCart;    public TableColumn colItemCode;    public TableColumn colDescription;    public TableColumn colQTYOnHand;    public TableColumn colQTY;    public TableColumn colUnitPrice;    public TableColumn colTotal;    public TableColumn colOperate;    public ComboBox<String> cmbCustomerId;    public TextField txtName;    public Label lblTotalCost;    public void initialize() {        colItemCode.setCellValueFactory(new PropertyValueFactory("itemCode"));        colDescription.setCellValueFactory(new PropertyValueFactory("description"));        colQTYOnHand.setCellValueFactory(new PropertyValueFactory("qtyOnHand"));        colQTY.setCellValueFactory(new PropertyValueFactory("qty"));        colUnitPrice.setCellValueFactory(new PropertyValueFactory("UnitPrice"));        colTotal.setCellValueFactory(new PropertyValueFactory("total"));        colOperate.setCellValueFactory(new PropertyValueFactory("btn"));        loadDateAndTime();        loadAllCustomerIds();        loadAllItemIds();        generateOrderId();        //----------------------------------------------        cmbCustomerId.getSelectionModel().selectedItemProperty().                addListener((observable, oldValue, newValue) -> {                    loadUniqueCustomerData(newValue);                });        //-----------------------------------------------        cmbItemCOde.getSelectionModel().selectedItemProperty().                addListener((observable, oldValue, newValue) -> {                    loadUniqueItemData(newValue);                });    }    private void loadUniqueItemData(String selectedId) {        for (Item i : DataBase.itemDataTable        ) {            if (i.getCode().equals(selectedId)) {                txtDescription.setText(i.getDescription());                txtQtyOnHand.setText(String.valueOf(i.getQtyOnHand()));                txtUnitPrice.setText(String.valueOf(i.getUnitPrice()));                return;            }        }    }    private void loadUniqueCustomerData(String selectedId) {        for (Customer c : DataBase.customerDataTable        ) {            if (c.getId().equals(selectedId)) {                txtName.setText(c.getName());                txtAddress.setText(c.getAddress());                txtSalary.setText(String.valueOf(c.getSalary()));                return;            }        }    }    private void loadDateAndTime() {        //-----------load Order date        Date date = new Date(); // util        SimpleDateFormat df = new                SimpleDateFormat("YYYY-MM-dd");        String currentDate = df.format(date);        lblDate.setText(currentDate);        //-----------load Order Time        /*SimpleDateFormat df1=new                SimpleDateFormat("HH-mm-ss");        String currentTime=df1.format(date);        lblTime.setText(currentTime);*/        //----------- new way        Timeline timeline = new                Timeline(new                KeyFrame(Duration.ZERO, e -> {            LocalTime cT = LocalTime.now();            lblTime.setText(cT.getHour() + ": " +                    cT.getMinute() + ": " +                    cT.getSecond()            );        }),                new KeyFrame(Duration.seconds(1))        );        timeline.setCycleCount(Animation.INDEFINITE);        timeline.play();    }    private void loadAllItemIds() {        ObservableList<String> obList = FXCollections.observableArrayList();        DataBase.itemDataTable.stream().forEach(e -> {            obList.add(e.getCode());        });        cmbItemCOde.setItems(obList);    }    private void loadAllCustomerIds() {        ObservableList<String> obList = FXCollections.observableArrayList();        DataBase.customerDataTable.stream().forEach(e -> {            obList.add(e.getId());        });        cmbCustomerId.setItems(obList);    }    public void btnBackToHome(ActionEvent actionEvent) throws IOException {        Stage stage = (Stage) root.getScene().getWindow();        stage.setScene(new Scene(FXMLLoader.                load(this.getClass().                        getResource("/view/DashBoardForm.fxml"))));        stage.centerOnScreen();    }    public void btnAddToCartObAction(ActionEvent actionEvent) {        addToCart();    }    public void btnPlaceOrderOnAction(ActionEvent actionEvent) {        if (obList.isEmpty()) {//            new Alert(Alert.AlertType.ERROR,                    "Please Add Items!!!", ButtonType.OK).show();            return;        }        ArrayList<ItemDetail> itemDetailList = new ArrayList<>();        for (CartTM tm : obList        ) {            itemDetailList.add(new ItemDetail(tm.getItemCode()                    , tm.getUnitPrice(), tm.getQty()));        }        Order order =                new Order(                        lblOrderId.getText(),                        cmbCustomerId.getSelectionModel().getSelectedItem(),                        lblDate.getText(),                        lblTime.getText(),                        total,                        itemDetailList);        boolean isSaved = DataBase.orderDataTable.add(order);        if (isSaved) {            new Alert(Alert.AlertType.CONFIRMATION, "Saved").show();            generateOrderId();            // set Item QTY            for (CartTM cTm:obList                 ) {               updateQTY(cTm);            }            obList.clear();            clearAllFields();            //        } else {            new Alert(Alert.AlertType.WARNING, "Try Again").show();        }    }    private void clearAllFields() {        txtQTY.setText("");        txtUnitPrice.clear();//-----------        txtQtyOnHand.clear();        txtDescription.clear();        txtSalary.clear();        txtAddress.clear();        cmbItemCOde.getSelectionModel().clearSelection();        cmbCustomerId.getSelectionModel().clearSelection();        txtName.clear();        lblTotalCost.setText("0.00 LKR");    }    private void updateQTY(CartTM cTm) {        for (Item tempItem:DataBase.itemDataTable             ) {            if (tempItem.getCode().equals(cTm.getItemCode())){                //--- update                tempItem.setQtyOnHand(tempItem.getQtyOnHand()-cTm.getQty());                return;            }        }    }    public void btnNewCustomerOnAction(ActionEvent actionEvent) throws IOException {        Stage window = (Stage) root.getScene().getWindow();        window.setScene(new Scene(FXMLLoader.                load(this.getClass().                        getResource("/view/CustomerForm.fxml"))));        window.centerOnScreen();    }    public void txtaddToCartOnAction(ActionEvent actionEvent) {        addToCart();    }    private void addToCart() {        int qtyForCustomer = 0;        try {            qtyForCustomer = Integer.parseInt(txtQTY.getText());        } catch (Exception e) {            new Alert(Alert.AlertType.WARNING,                    "Please Insert a Valid QTY", ButtonType.OK).show();            return;        }        //-------------------------------------------        int qtyOnHand = Integer.parseInt(txtQtyOnHand.getText());        if (qtyOnHand >= qtyForCustomer) {            //-------            addDataToTable();        } else {            new Alert(Alert.AlertType.WARNING,                    "Please Insert a Valid QTY", ButtonType.OK).show();            return;        }    }    ObservableList<CartTM> obList =            FXCollections.observableArrayList();    private void addDataToTable() {        //----------------------------        Button btn = new Button("Delete");        int qty = Integer.parseInt(txtQTY.getText());        double unitPrice = Double.parseDouble(txtUnitPrice.getText());        double total = unitPrice * qty;        CartTM tm = new CartTM(                cmbItemCOde.getValue()                /*cmbItemCOde.getSelectionModel().getSelectedItem()*/,                txtDescription.getText(),                Integer.parseInt(txtQtyOnHand.getText()),                qty,                unitPrice,                total,                btn        );        boolean isExists = isExists(obList, tm);        if (isExists) {            tblCart.refresh();        } else {            obList.add(tm);            tblCart.setItems(obList);        }        calculateTotalCost();    }    double total = 0;    private void calculateTotalCost() {        total = 0;        for (CartTM tm : obList        ) {            total += tm.getTotal();        }        lblTotalCost.setText(total + " LKR");    }    private boolean isExists(ObservableList<CartTM> obList, CartTM tmForAdd) {        for (CartTM selectedItem : obList        ) {            if (selectedItem.getItemCode().equals(tmForAdd.getItemCode())) {                selectedItem.setTotal(selectedItem.getTotal() + tmForAdd.getTotal());//                selectedItem.setQty(selectedItem.getQty() + tmForAdd.getQty());                return true;            }        }        return false;    }    private void generateOrderId() {        String orderId = "D-001";        if (DataBase.orderDataTable.isEmpty()) {            lblOrderId.setText(orderId);            return;        }        //-----------------        Order tempOrder =                DataBase.orderDataTable.get(DataBase.orderDataTable.size() - 1);        String tempId = tempOrder.getOrderId();        String[] tempArray = tempId.split("-"); //[D,003]        int num = Integer.parseInt(tempArray[1]); // 003 ---> 3        num++;        orderId = "D-" + String.format("%03d", num);        lblOrderId.setText(orderId);    }}